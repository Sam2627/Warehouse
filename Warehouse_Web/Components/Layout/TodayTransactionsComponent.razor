@inject ITransactionUseCase TransactionUseCase

@if (transactions != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Cashier Name</th>
                <th>Product Name</th>
                <th>Time</th>
                <th>Quantity Before Sell</th>
                <th>Quantity Sold</th>
                <th>Quantity After Sold</th>
                <th>Sold Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trans in transactions)
            {
                <tr>
                    <td>@trans.EmployeeName</td>
                    <td>@trans.ProductName</td>
                    <td>@trans.TimeStamp.ToString("dd-MM-yyyy hh:mm")</td>
                    <td>@trans.StockQuantity</td>
                    <td>@trans.SellQuantity</td>
                    <td>@(trans.StockQuantity - trans.SellQuantity)</td>
                    <td>@(string.Format("{0:c}", trans.SellQuantity * trans.Price))</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IEnumerable<GoodsTransaction> transactions;

    public void LoadTransactions(string cashierName)
    {
        transactions = TransactionUseCase.Get(cashierName);
        StateHasChanged();
    }

    public async Task LoadTransactionsAsync(string cashierName)
    {
        transactions = await TransactionUseCase.GetAsync(cashierName);
        StateHasChanged();
    }
}
